// <auto-generated />
using System;
using InitialSetup.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InitialSetup.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InitialSetup.Entities.Countries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("InitialSetup.Entities.EvilnessFactors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EvilnessFactors");
                });

            modelBuilder.Entity("InitialSetup.Entities.Minions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TownId");

                    b.ToTable("Minions");
                });

            modelBuilder.Entity("InitialSetup.Entities.Towns", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryCode")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Towns");
                });

            modelBuilder.Entity("InitialSetup.Entities.Villains", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EvilnessFactorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EvilnessFactorId");

                    b.ToTable("Villains");
                });

            modelBuilder.Entity("MinionsVillains", b =>
                {
                    b.Property<int>("MinionsId")
                        .HasColumnType("int");

                    b.Property<int>("VillainsId")
                        .HasColumnType("int");

                    b.HasKey("MinionsId", "VillainsId");

                    b.HasIndex("VillainsId");

                    b.ToTable("MinionsVillains");
                });

            modelBuilder.Entity("InitialSetup.Entities.Minions", b =>
                {
                    b.HasOne("InitialSetup.Entities.Towns", "Town")
                        .WithMany("Minions")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");
                });

            modelBuilder.Entity("InitialSetup.Entities.Towns", b =>
                {
                    b.HasOne("InitialSetup.Entities.Countries", "Country")
                        .WithMany("Towns")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("InitialSetup.Entities.Villains", b =>
                {
                    b.HasOne("InitialSetup.Entities.EvilnessFactors", "EvilnessFactor")
                        .WithMany("Villains")
                        .HasForeignKey("EvilnessFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvilnessFactor");
                });

            modelBuilder.Entity("MinionsVillains", b =>
                {
                    b.HasOne("InitialSetup.Entities.Minions", null)
                        .WithMany()
                        .HasForeignKey("MinionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InitialSetup.Entities.Villains", null)
                        .WithMany()
                        .HasForeignKey("VillainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InitialSetup.Entities.Countries", b =>
                {
                    b.Navigation("Towns");
                });

            modelBuilder.Entity("InitialSetup.Entities.EvilnessFactors", b =>
                {
                    b.Navigation("Villains");
                });

            modelBuilder.Entity("InitialSetup.Entities.Towns", b =>
                {
                    b.Navigation("Minions");
                });
#pragma warning restore 612, 618
        }
    }
}
